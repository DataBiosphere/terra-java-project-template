name: Integration Tests

on:
  workflow_dispatch:
    inputs:
      environment:
        type: choice
        description: 'environment to run test in'
        required: true
        options:
          - staging
          - alpha
          - dev
        default: 'dev'

env:
  TEST_ENV: ${{ github.event.inputs.environment }}
  TEST_DEFAULT: dev

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'gradle'

      - name: Gradle build service
        run: ./gradlew --build-cache :service:build -x test

  jib:
    needs: [ build ]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'gradle'

      - name: Construct docker image name and tag
        id: image-name
        run: |
          GITHUB_REPO=$(basename ${{ github.repository }})
          GIT_SHORT_HASH=$(git rev-parse --short HEAD)
          echo "name=${GITHUB_REPO}:${GIT_SHORT_HASH}" >> $GITHUB_OUTPUT

      - name: Build image locally with jib
        run: |
          DOCKER_IMAGE_NAME_AND_TAG=${{ steps.image-name.outputs.name }} \
          ./scripts/build docker

  dispatch-trivy:
    needs: [ build ]
    runs-on: ubuntu-latest

    steps:
      - name: Fire off Trivy action
        uses: broadinstitute/workflow-dispatch@v1
        with:
          workflow: Trivy
          token: ${{ secrets.BROADBOT_TOKEN }}

  test-env:
    runs-on: ubuntu-latest
    outputs:
      test-env: ${{ steps.test-env.outputs.test-env }}

    steps:
      - name: Set default test env
        id: test-env
        run: |
          echo "test-env=${{ env.TEST_ENV || env.TEST_DEFAULT }}" >> $GITHUB_OUTPUT

  test-runner:
    needs: [ build, test-env ]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Get the helm chart versions for the test env
        run: |
          curl -H 'Authorization: token ${{ secrets.BROADBOT_TOKEN }}' \
            -H 'Accept: application/vnd.github.v3.raw' \
            -L https://api.github.com/repos/broadinstitute/terra-helmfile/contents/versions/app/dev.yaml \
            --create-dirs -o "integration/src/main/resources/rendered/dev.yaml"
          curl -H 'Authorization: token ${{ secrets.BROADBOT_TOKEN }}' \
            -H 'Accept: application/vnd.github.v3.raw' \
            -L https://api.github.com/repos/broadinstitute/terra-helmfile/contents/environments/live/${{ needs.test-env.outputs.test-env }}.yaml \
            --create-dirs -o "integration/src/main/resources/rendered/${{ needs.test-env.outputs.test-env }}.yaml"

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'gradle'

      - name: Render GitHub Secrets
        run: |
          echo "${{ secrets.DEV_FIRECLOUD_ACCOUNT_B64 }}" | base64 -d > "integration/src/main/resources/rendered/user-delegated-sa.json"
          echo "${{ secrets.PERF_TESTRUNNER_ACCOUNT_B64 }}" | base64 -d > "integration/src/main/resources/rendered/testrunner-perf.json"

      - name: Run integration test suite
        run: |
          TEST_ENV=${{ needs.test-env.outputs.test-env }} \
          ./scripts/run integration

      - name: Upload Test Reports for QA
        if: always()
        run: |
          ./gradlew --build-cache uploadResults --args="CompressDirectoryToTerraKernelK8S.json build/reports"

      - name: Upload Test Reports for GitHub
        if: always()
        uses: actions/upload-artifact@v1
        with:
          name: Test Reports
          path: integration/build/reports

  # report workflow status in slack
  # see https://docs.google.com/document/d/1G6-whnNJvON6Qq1b3VvRJFC7M9M-gu2dAVrQHDyp9Us/edit?usp=sharing
  report-workflow:
    # we only need a needs clause here now because we need output generated from that the test-env job
    # in order to pass which environment the workflow ran in to the report-workflow job.
    # This will still handle workflow completion properly without 'need'ing the other jobs,
    # This calculation of workflow completion/status is handled by dsp-devops internal tooling. Reach out in #dsp-devops-champions if you have questions
    needs: [test-env]
    uses: broadinstitute/sherlock/.github/workflows/client-report-workflow.yaml@main
    with:
      # Channels to notify upon workflow success or failure
      notify-slack-channels-upon-workflow-completion: '#ap-k8s-monitor,#dsde-qa'

      # Channels to notify upon workflow success only
      # notify-slack-channels-upon-workflow-success: "#channel-here"

      # Channels to notify upon workflow failure only
      # notify-slack-channels-upon-workflow-failure: "#channel-here"

      # Report which environment the workflow ran in
      # chart-release is the term used by dsp-devops tooling to refer to an environment/application pair.
      relates-to-chart-releases: ${{ steps.test-env.outputs.test-env }}/javatemplate
    permissions:
      id-token: 'write'
