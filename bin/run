#!/bin/bash
# run the service in one of two modes, either
# local-y or in a docker container
set -e #-x

run_locally=false               # Overridden by -l or --local
run_in_docker=false             # Overridden by -d or --docker

# option support: https://stackoverflow.com/a/28466267
# supported option syntaxes include:
# `x`  -x
# `x:` -x value or --x-long-name=value
#
# unsupported syntax is:
# --xoption value
#
# NOTE: if requiring an option-value with `:`,
# please specify `needs_arg` first in the case opts below
#
die() { echo "$*" >&2; exit 2; }  # complain to STDERR and exit with error
needs_arg() { if [ -z "$OPTARG" ]; then die "No arg for --$OPT option"; fi; }

while getopts ld-: OPT; do  # allow -a, -b with arg, -c, and -- "with arg"
  # support long options: https://stackoverflow.com/a/28466267/519360
  if [ "$OPT" = "-" ]; then   # long option: reformulate OPT and OPTARG
    OPT="${OPTARG%%=*}"       # extract long option name
    OPTARG="${OPTARG#$OPT}"   # extract long option argument (may be empty)
    OPTARG="${OPTARG#=}"      # if long option argument, remove assigning `=`
  fi
  case "$OPT" in
    l | local )    run_locally=true ;;
    d | docker )   run_in_docker=true ;;
    \? )           exit 2 ;;  # bad short option (error reported via getopts)
    * )            die "Illegal option --$OPT" ;;            # bad long option
  esac
done
shift $((OPTIND-1)) # remove parsed options and args from $@ list

####
#
#
[ "${run_locally}" = true ] && echo "local-y running!"
[ "${run_in_docker}" = true ] && echo "docker-me!"

