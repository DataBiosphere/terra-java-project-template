#!/bin/bash
# execute all of the steps necessary to build the project
set -e #-x

usage() {
  echo "usage: $0 [-h|--help] [compile|test|package|docker]"
  echo ""
  echo "[-h|--help]      print this help text"
}

# script variables and defaults
ROOT_DIR="$(cd "$(dirname "$0")/.."; pwd)"
build_cmd=build               # Overridden by -c or --cmd
DEBUG_OPTS=""


# process command-line options (if any)
die() { echo "$*" >&2; echo ""; usage; exit 2; }  # complain to STDERR and exit with error
needs_arg() { if [ -z "$OPTARG" ]; then die "No arg for --$OPT option"; fi; }

while getopts h-: OPT; do  # allow -h and -- "with arg"
  # support long options: https://stackoverflow.com/a/28466267/519360
  if [ "$OPT" = "-" ]; then   # long option: reformulate OPT and OPTARG
    OPT="${OPTARG%%=*}"       # extract long option name
    OPTARG="${OPTARG#$OPT}"   # extract long option argument (may be empty)
    OPTARG="${OPTARG#=}"      # if long option argument, remove assigning `=`
  fi
  case "$OPT" in
    h | help )     usage; exit 0 ;;
    \? )           usage; exit 2 ;;  # bad short option (error reported via getopts)
    * )            die "Illegal option --$OPT" ;;            # bad long option
  esac
done
shift $((OPTIND-1)) # remove parsed options and args from $@ list

package() {
  cd ${ROOT_DIR}
  ${ROOT_DIR}/gradlew
}


# process input arguments
CMD=$1
echo "command: $CMD"
case "$CMD" in
  compile )      echo "compile" ;;
  test )         echo "test" ;;
  package )      echo "package" ;;
  docker )       echo "docker" ;;
  \? )           usage; exit 2 ;;  # bad short option (error reported via getopts)
  * )            die "Missing or illegal build command: '${CMD}'" ;;            # bad long option
esac



./gradlew --build-cache :service:jibDockerBuild \
./gradlew --build-cache build -x test
./gradlew --build-cache build -x test -x spotlessCheck
./gradlew --build-cache :service:build -x test
./gradlew --build-cache bootRun | tee application.log &
./gradlew --build-cache srcclr
./gradlew --build-cache test jacocoTestReport
./gradlew --build-cache runTest --args="suites/${{ needs.test-env.outputs.test-env }}/FullIntegration.json build/reports"
./gradlew --build-cache runTest --args="suites/local/FullIntegration.json build/reports"
./gradlew --build-cache uploadResults --args="CompressDirectoryToTerraKernelK8S.json build/reports"
#        run: ./gradlew --build-cache sonar



