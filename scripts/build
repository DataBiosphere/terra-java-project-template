#!/bin/bash
# execute all of the steps necessary to build the project
set -e #-x

usage() {
  echo "usage: $0 [-h|--help] COMMAND"
  echo ""
  echo "[-h|--help]      print this help text"
  echo ""
  echo "COMMAND is one of the following:"
  echo "- compile        compile the project"
  echo "- test           execute the tests"
  echo "- build          the default build command"
  echo "- docker         build a docker image"
}

# script variables and defaults
ROOT_DIR="$(cd "$(dirname "$0")/.."; pwd)"
build_cmd=build
DEBUG_OPTS=""


# process command-line options (if any)
die() { echo "$*" >&2; echo ""; usage; exit 2; }  # complain to STDERR and exit with error
needs_arg() { if [ -z "$OPTARG" ]; then die "No arg for --$OPT option"; fi; }

while getopts h-: OPT; do  # allow -h and -- "with arg"
  # support long options: https://stackoverflow.com/a/28466267/519360
  if [ "$OPT" = "-" ]; then   # long option: reformulate OPT and OPTARG
    OPT="${OPTARG%%=*}"       # extract long option name
    OPTARG="${OPTARG#$OPT}"   # extract long option argument (may be empty)
    OPTARG="${OPTARG#=}"      # if long option argument, remove assigning `=`
  fi
  case "$OPT" in
    h | help )     usage; exit 0 ;;
    \? )           usage; exit 2 ;;  # bad short option (error reported via getopts)
    * )            die "Illegal option --$OPT" ;;            # bad long option
  esac
done
shift $((OPTIND-1)) # remove parsed options and args from $@ list


# process positional arguments (if any)
build_package() {
  cd ${ROOT_DIR}
  ./gradlew --build-cache build
#./gradlew --build-cache build -x test
#./gradlew --build-cache build -x test -x spotlessCheck
#./gradlew --build-cache :service:build -x test
}

build_docker() {
  GIT_REPO_NAME=$(basename ${ROOT_DIR})
  GIT_SHA_SHORT=$(git rev-parse --short HEAD)

  DOCKER_IMAGE_NAME=${NAME:-${GIT_REPO_NAME}}

  cd ${ROOT_DIR}
  ./gradlew --build-cache :service:jibDockerBuild \
            --image=${DOCKER_IMAGE_NAME}:${GIT_SHA_SHORT} \
            -Djib.console=plain

  # the latest tag will allow `docker compose` to work correctly
  docker image tag ${DOCKER_IMAGE_NAME}:${GIT_SHA_SHORT} ${DOCKER_IMAGE_NAME}:latest
#./gradlew --build-cache :service:jibDockerBuild \
}

# process positional arguments (if any)
COMMAND=$1

case "$COMMAND" in
  compile )      compile ;;
  test )         test ;;
  package )      build_package ;;
  docker )       build_docker ;;
  * )            die "Missing or invalid positional command: '${COMMAND}'" ;;
esac





#./gradlew --build-cache srcclr
#./gradlew --build-cache test jacocoTestReport
#./gradlew --build-cache runTest --args="suites/${{ needs.test-env.outputs.test-env }}/FullIntegration.json build/reports"
#./gradlew --build-cache runTest --args="suites/local/FullIntegration.json build/reports"
#./gradlew --build-cache uploadResults --args="CompressDirectoryToTerraKernelK8S.json build/reports"

#        run: ./gradlew --build-cache sonar

