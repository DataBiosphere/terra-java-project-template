#!/usr/bin/env bash
# manage / interact with postgres container with initial repo setup

usage() {
    echo "Usage: $0 [-h|--help] start|stop|shell"
    exit 1
}

# script variables and defaults
POSTGRES_VERSION=14
POSTGRES_PORT=${2:-"5432"}

# these values are currently shared in other scripts
# init-db/postgres-init.sql
# service/src/main/resources/application.yml
DATABASE_NAME=javatemplate_db
DATABASE_USER=dbuser
DATABASE_USER_PASSWORD=dbpwd

CONTAINER_NAME=javatemplate-postgres
COMMAND=$1


# process command-line options (if any)
die() { echo "$*" >&2; echo ""; usage; exit 2; }  # complain to STDERR and exit with error
needs_arg() { if [ -z "$OPTARG" ]; then die "No arg for --$OPT option"; fi; }

while getopts h-: OPT; do  # allow -h and -- "with arg"
  # support long options: https://stackoverflow.com/a/28466267/519360
  if [ "$OPT" = "-" ]; then   # long option: reformulate OPT and OPTARG
    OPT="${OPTARG%%=*}"       # extract long option name
    OPTARG="${OPTARG#$OPT}"   # extract long option argument (may be empty)
    OPTARG="${OPTARG#=}"      # if long option argument, remove assigning `=`
  fi
  case "$OPT" in
    h | help )     usage; exit 0 ;;
    \? )           usage; exit 2 ;;  # bad short option (error reported via getopts)
    * )            die "Illegal option --$OPT" ;;            # bad long option
  esac
done
shift $((OPTIND-1)) # remove parsed options and args from $@ list


start() {
    echo "attempting to remove old $CONTAINER_NAME container..."
    docker rm -f $CONTAINER_NAME

    # start up postgres
    echo "starting up postgres container..."
    BINDIR=$(dirname "$0")
    docker create --name $CONTAINER_NAME --rm -e POSTGRES_PASSWORD=password -p "$POSTGRES_PORT:5432" postgres:$POSTGRES_VERSION -c listen_addresses='*'
    docker cp $BINDIR/init-db/postgres-init.sql $CONTAINER_NAME:/docker-entrypoint-initdb.d/docker_postgres_init.sql
    docker start $CONTAINER_NAME

    # validate postgres
    echo "running postgres validation..."
    docker exec $CONTAINER_NAME sh -c "$(cat $BINDIR/init-db/validate_psql.sh)"
    if [ 0 -eq $? ]; then
        echo "postgres validation succeeded."
    else
        echo "postgres validation failed."
        exit 1
    fi
}

stop() {
    echo "Stopping docker $CONTAINER_NAME container..."
    docker stop $CONTAINER_NAME || echo "postgres stop failed. container already stopped."
    docker rm -v $CONTAINER_NAME
    exit 0
}

shell() {
  docker exec -it $CONTAINER_NAME psql -U $DATABASE_USER $DATABASE_NAME
}

if [ "$COMMAND" = "start" ]; then
    start
elif [ "$COMMAND" = "stop" ]; then
    stop
elif [ "$COMMAND" = "shell" ]; then
    shell
else
    usage
fi
